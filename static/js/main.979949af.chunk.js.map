{"version":3,"sources":["components/TableView/index.js","App.js","serviceWorker.js","index.js"],"names":["TableView","props","state","data","isLoaded","error","fetch","then","response","json","result","setState","this","Table","responsive","striped","bordered","hover","size","variant","map","stat","key","uid","res_geo_short","work_geo_short","total","drove_alone","_2_person_carpool","_3_person_carpool","_4_person_carpool","_5_or_6_person_carpool","_7_or_more_person_carpool","bus","streetcar_or_trolley","subway","railroad","bicycle","taxi","motorcycle","other","worked_at_home","React","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4UAkGeA,G,kBA3Fb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,KAAM,GACNC,UAAU,EACVC,MAAO,MALQ,E,iFASE,IAAD,OAClBC,MAAM,yDACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAEC,SAACG,GACC,EAAKC,SAAS,CACZP,UAAU,EACVD,KAAMO,OAIV,SAACL,GACC,EAAKM,SAAS,CACZP,UAAU,EACVC,e,+BAMA,IAAD,EAC2BO,KAAKV,MAA/BG,EADD,EACCA,MAAOD,EADR,EACQA,SAAUD,EADlB,EACkBA,KAEzB,OAAIE,EACK,sDACFD,EAIL,kBAACS,EAAA,EAAD,CAAOC,YAAU,EAACC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAACC,KAAK,KAAKC,QAAQ,QACzD,+BACE,4BACE,mDACA,+CACA,qCACA,2CACA,gDACA,gDACA,gDACA,qDACA,wDACA,mCACA,oDACA,sCACA,wCACA,uCACA,oCACA,0CACA,qCACA,gDAGJ,+BACIhB,EAAKiB,KAAI,SAACC,GAAD,OACT,wBAAIC,IAAKC,YAAIF,IACX,4BAAKA,EAAKG,eACV,4BAAKH,EAAKI,gBACV,4BAAKJ,EAAKK,OACV,4BAAKL,EAAKM,aACV,4BAAKN,EAAKO,mBACV,4BAAKP,EAAKQ,mBACV,4BAAKR,EAAKS,mBACV,4BAAKT,EAAKU,wBACV,4BAAKV,EAAKW,2BACV,4BAAKX,EAAKY,KACV,4BAAKZ,EAAKa,sBACV,4BAAKb,EAAKc,QACV,4BAAKd,EAAKe,UACV,4BAAKf,EAAKgB,SACV,4BAAKhB,EAAKiB,MACV,4BAAKjB,EAAKkB,YACV,4BAAKlB,EAAKmB,OACV,4BAAKnB,EAAKoB,sBA9CX,gD,GArCWC,IAAMC,Y,MCWfC,MAbf,WACE,OACE,yBAAKC,UAAU,iBACb,gCACE,yDACA,gFACA,qRAEF,kBAAC,EAAD,QCAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlD,MAAK,SAAAmD,GACjCA,EAAaC,kB","file":"static/js/main.979949af.chunk.js","sourcesContent":["/* eslint-disable no-underscore-dangle */\nimport React from 'react';\nimport { Table } from 'react-bootstrap';\nimport { uid } from 'react-uid';\nimport styles from './styles.css';\n\nclass TableView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n      isLoaded: false,\n      error: null,\n    };\n  }\n\n  componentDidMount() {\n    fetch('https://data.bayareametro.gov/resource/a3ij-q9vc.json')\n      .then((response) => response.json())\n      .then(\n        // Handle the result\n        (result) => {\n          this.setState({\n            isLoaded: true,\n            data: result,\n          });\n        },\n        // Handle error\n        (error) => {\n          this.setState({\n            isLoaded: true,\n            error,\n          });\n        },\n      );\n  }\n\n  render() {\n    const { error, isLoaded, data } = this.state;\n\n    if (error) {\n      return <div>Error in loading data</div>;\n    } if (!isLoaded) {\n      return <div>Loading ...</div>;\n    }\n    return (\n      <Table responsive striped bordered hover size=\"sm\" variant=\"dark\">\n        <thead>\n          <tr>\n            <th>County of Residence</th>\n            <th>County for Work</th>\n            <th>Total</th>\n            <th>Drove Alone</th>\n            <th>2 Person Carpool</th>\n            <th>3 Person Carpool</th>\n            <th>4 Person Carpool</th>\n            <th>5 or 6 Person Carpool</th>\n            <th>7 or More Person Carpool</th>\n            <th>Bus</th>\n            <th>Streetcar or Trolley</th>\n            <th>Subway</th>\n            <th>Railroad</th>\n            <th>Bicycle</th>\n            <th>Taxi</th>\n            <th>Motorcycle</th>\n            <th>Other</th>\n            <th>Worked at Home</th>\n          </tr>\n        </thead>\n        <tbody>\n          { data.map((stat) => (\n            <tr key={uid(stat)}>\n              <td>{stat.res_geo_short}</td>\n              <td>{stat.work_geo_short}</td>\n              <td>{stat.total}</td>\n              <td>{stat.drove_alone}</td>\n              <td>{stat._2_person_carpool}</td>\n              <td>{stat._3_person_carpool}</td>\n              <td>{stat._4_person_carpool}</td>\n              <td>{stat._5_or_6_person_carpool}</td>\n              <td>{stat._7_or_more_person_carpool}</td>\n              <td>{stat.bus}</td>\n              <td>{stat.streetcar_or_trolley}</td>\n              <td>{stat.subway}</td>\n              <td>{stat.railroad}</td>\n              <td>{stat.bicycle}</td>\n              <td>{stat.taxi}</td>\n              <td>{stat.motorcycle}</td>\n              <td>{stat.other}</td>\n              <td>{stat.worked_at_home}</td>\n            </tr>\n          ))}\n        </tbody>\n      </Table>\n    );\n  }\n}\n\nexport default TableView;\n","import React from 'react';\nimport TableView from './components/TableView';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"app container\">\n      <header>\n        <h1>Bay Area Commute Patterns</h1>\n        <h3>How and where do people commute in the Bay Area?</h3>\n        <p> Commute patterns, more commonly referred to as county-to-county commute flows, reflect the number of individuals traveling within and between various counties for commuting purposes. DATA SOURCE: U.S. Census Transportation Planning Package 2010</p>\n      </header>\n      <TableView />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}