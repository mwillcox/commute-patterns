{"version":3,"sources":["components/TableView/index.js","components/PieChartView/index.js","App.js","serviceWorker.js","index.js"],"names":["TableView","props","data","className","Table","responsive","striped","bordered","hover","size","variant","map","stat","key","uid","work_geo_short","total","drove_alone","total_carpool","taxi","total_public_transit","bicycle","motorcycle","worked_at_home","other","PieChartView","bikeSum","reduce","acc","val","publicTransitSum","carSum","car_total","bikePercentage","Math","floor","carPercentage","chartData","name","value","width","height","dataKey","cx","cy","outerRadius","fill","label","entry","App","state","isLoaded","error","selectedCounty","handleCountyChange","bind","fetch","then","response","json","result","setState","this","listOfCounties","Set","x","res_geo_short","sort","groupedData","groupBy","item","forEach","county","convertStrings","list","keyGetter","Map","collection","get","push","set","array","parseInt","_2_person_carpool","_3_person_carpool","_4_person_carpool","_5_or_6_person_carpool","_7_or_more_person_carpool","bus","streetcar_or_trolley","subway","railroad","event","target","massagedData","massageData","href","htmlFor","id","onChange","renderDataVisualizations","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e03ab751.chunk.js","sourcesContent":["/* eslint-disable radix */\n/* eslint-disable no-underscore-dangle */\n/* eslint-disable no-unused-vars */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Table } from 'react-bootstrap';\nimport { uid } from 'react-uid';\nimport styles from './styles.css';\n\nfunction TableView(props) {\n  const { data } = props;\n\n  return (\n    <div className=\"table-container\">\n      <h3>Commute mode totals broken up by work county destination: </h3>\n      <Table responsive striped bordered hover size=\"sm\" variant=\"dark\">\n        <thead>\n          <tr>\n            <th>County for Work</th>\n            <th>Total</th>\n            <th>Drove Alone</th>\n            <th>Carpooled</th>\n            <th>Taxi</th>\n            <th>Public Transit</th>\n            <th>Bicycle</th>\n            <th>Motorcycle</th>\n            <th>Worked at Home</th>\n            <th>Other</th>\n          </tr>\n        </thead>\n        <tbody>\n          { data.map((stat) => (\n            <tr key={uid(stat)}>\n              <td>{stat.work_geo_short}</td>\n              <td>{stat.total}</td>\n              <td>{stat.drove_alone}</td>\n              <td>{stat.total_carpool}</td>\n              <td>{stat.taxi}</td>\n              <td>{stat.total_public_transit}</td>\n              <td>{stat.bicycle}</td>\n              <td>{stat.motorcycle}</td>\n              <td>{stat.worked_at_home}</td>\n              <td>{stat.other}</td>\n            </tr>\n          ))}\n        </tbody>\n      </Table>\n    </div>\n  );\n}\n\nTableView.propTypes = {\n  data: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nexport default TableView;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { PieChart, Pie, Tooltip } from 'recharts';\n// eslint-disable-next-line no-unused-vars\nimport styles from './styles.css';\n\nfunction PieChartView(props) {\n  const { data } = props;\n\n  // TODO: refactor into generic external util function\n  const bikeSum = data.reduce((acc, val) => acc + val.bicycle, 0);\n  const publicTransitSum = data.reduce((acc, val) => acc + val.total_public_transit, 0);\n  const carSum = data.reduce((acc, val) => acc + val.car_total, 0);\n  const total = bikeSum + publicTransitSum + carSum;\n\n  const bikePercentage = Math.floor((bikeSum / total) * 100);\n  const carPercentage = Math.floor((carSum / total) * 100);\n  const publicTransitPercentage = Math.floor((publicTransitSum / total) * 100);\n  const chartData = [\n    { name: 'Bicyle', value: bikePercentage },\n    { name: 'Car', value: publicTransitPercentage },\n    { name: 'Public Transit', value: carPercentage },\n  ];\n\n  const renderLabel = (entry) => entry.name;\n  return (\n    <div className=\"chart-container\">\n      <h3>Percentage of different commute types for the selected county: </h3>\n      <div className=\"chart\">\n        <PieChart width={500} height={200}>\n          <Pie dataKey=\"value\" data={chartData} cx={250} cy={100} outerRadius={80} fill=\"#FFA500\" label={renderLabel} />\n          <Tooltip />\n        </PieChart>\n      </div>\n    </div>\n  );\n}\n\nPieChartView.propTypes = {\n  data: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nexport default PieChartView;\n","/* eslint-disable radix */\n/* eslint-disable no-param-reassign */\n/* eslint-disable no-underscore-dangle */\n/* eslint-disable class-methods-use-this */\nimport React from 'react';\nimport TableView from './components/TableView';\nimport PieChartView from './components/PieChartView';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n      isLoaded: false,\n      error: null,\n      selectedCounty: 'Alameda',\n    };\n    this.handleCountyChange = this.handleCountyChange.bind(this);\n  }\n\n  componentDidMount() {\n    fetch('https://data.bayareametro.gov/resource/a3ij-q9vc.json')\n      .then((response) => response.json())\n      .then(\n        // Handle the result\n        (result) => {\n          this.setState({\n            isLoaded: true,\n            data: result,\n          });\n        },\n        // Handle error\n        (error) => {\n          this.setState({\n            isLoaded: true,\n            error,\n          });\n        },\n      );\n  }\n\n  // TODO: Move into external utilty function\n  massageData(data) {\n    // Grab the unique list of counties from the dataset\n    this.listOfCounties = [...new Set(data.map((x) => x.res_geo_short))].sort();\n\n    // Group data by residential county\n    const groupedData = this.groupBy(data, (item) => item.res_geo_short);\n\n    // Convert necessary string to ints and add aggregate fields\n    groupedData.forEach((county) => this.convertStrings(county));\n    return groupedData;\n  }\n\n  // TODO: Move into external utilty function\n  groupBy(list, keyGetter) {\n    const map = new Map();\n    list.forEach((item) => {\n      const key = keyGetter(item);\n      const collection = map.get(key);\n      if (!collection) {\n        map.set(key, [item]);\n      } else {\n        collection.push(item);\n      }\n    });\n    return map;\n  }\n\n  // TODO: Move into external utilty function\n  // Converts necessary JSON string values to integers\n  convertStrings(array) {\n    array.forEach((entry) => {\n      entry.total = parseInt(entry.total);\n      entry.drove_alone = parseInt(entry.drove_alone);\n      entry.taxi = parseInt(entry.taxi);\n      entry.total_carpool = parseInt(entry._2_person_carpool)\n        + parseInt(entry._3_person_carpool) + parseInt(entry._4_person_carpool)\n        + parseInt(entry._5_or_6_person_carpool)\n        + parseInt(entry._7_or_more_person_carpool);\n      entry.car_total = entry.drove_alone + entry.taxi + entry.total_carpool;\n      entry.total_public_transit = parseInt(entry.bus) + parseInt(entry.streetcar_or_trolley)\n        + parseInt(entry.subway) + parseInt(entry.railroad);\n      entry.bicycle = parseInt(entry.bicycle);\n      entry.motorcycle = parseInt(entry.motorcycle);\n      entry.worked_at_home = parseInt(entry.worked_at_home);\n    });\n  }\n\n  handleCountyChange(event) {\n    this.setState({ selectedCounty: event.target.value });\n  }\n\n  renderDataVisualizations() {\n    const {\n      error,\n      isLoaded,\n      data,\n      selectedCounty,\n    } = this.state;\n    if (error) {\n      return <div>Error in loading data</div>;\n    } if (!isLoaded) {\n      return <div>Loading ...</div>;\n    }\n    const massagedData = this.massageData(data).get(selectedCounty);\n    return (\n      <div className=\"data-container\">\n        <div className=\"county-select\">\n          <p>Commute patterns, more commonly referred to as county-to-county commute flows, reflect the number of individuals traveling within and between various counties for commuting purposes. This data comes from 2010 U.S. Census Transportation Planning Package and can be found \n            <a href=\"https://data.bayareametro.gov/dataset/Vital-Signs-Commute-Patterns-Bay-Area/a3ij-q9vc/data\">here</a>.</p>\n          <label className=\"select-label\" htmlFor=\"countySelector\">Select which county of residence you want to view data for: </label>\n          <select id=\"countySelector\" onChange={this.handleCountyChange} value={selectedCounty}>\n            { this.listOfCounties.map((county) => (\n              <option key={county} value={county}>{county}</option>)) }\n          </select>\n        </div>\n        <TableView data={massagedData} />\n        <PieChartView data={massagedData} />\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"app container\">\n        <div className=\"header-container\">\n          <div className=\"header-content\">\n            <h1>Bay Area Commute Patterns</h1>\n            <h2>Detailing how and where people commute in the Bay Area</h2>\n          </div>\n        </div>\n        {this.renderDataVisualizations()}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}